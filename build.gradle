apply plugin: 'java'

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven { url 'https://repo1.maven.org/maven2' }

    }
    dependencies {
        classpath 'gradle.plugin.com.github.johnrengelman:shadow:7.1.2'
    }
}
allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: 'com.github.johnrengelman.shadow'

group = 'com.blackboard.testing'


dependencies {
    implementation group: 'com.codeborne', name: 'selenide', version: '4.8'
    implementation group: 'com.amazonaws', name: 'aws-lambda-java-events', version: '3.11.0'
    implementation group: 'com.amazonaws', name: 'aws-lambda-java-core', version: '1.2.2'
    implementation group: 'com.amazonaws', name: 'aws-java-sdk-lambda', version: '1.12.350'
    implementation group: 'com.amazonaws.serverless', name: 'aws-serverless-java-container-jersey', version: '1.9'
    implementation group: 'com.amazonaws', name: 'aws-java-sdk-bom', version: '1.11.1000'
    implementation group: 'org.reflections', name: 'reflections', version: '0.10.2'
    implementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    implementation group: 'io.rest-assured', name: 'rest-assured', version: '4.5.1'
    implementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'


    testImplementation group: 'junit', name: 'junit', version: '4.12'
    implementation 'junit:junit:4.12'
    testImplementation group: 'org.junit.vintage', name: 'junit-vintage-engine', version: '5.9.1'
}

sourceSets {
    main {
        java {
            srcDir 'src'
        }
    }
    test {
        java {
            srcDir 'test'
        }
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
}


task unzipLibs(type: Copy) {
    def libs = file('../bin/lib.zip')
    def resources = file("${projectDir}/src/main/resources/")

    from zipTree(libs)
    into resources
}

task zipLibs(type: Zip) {
    from processResources
    archiveName 'lib.zip'
    destinationDir(file('../bin/'))
}

shadowJar {
    from sourceSets.test.output
    project.configurations.implementation.canBeResolved = true
    configurations = [project.configurations.implementation]
}

task deploy(type: Exec) {
    commandLine 'cmd', '/c', 'sls', 'deploy'
}
